{"name":"Hands On OpenCL","tagline":"An open source two-day lecture course for teaching and learning OpenCL","body":"### Welcome\r\nHands On OpenCL is a two-day lecture course introducing OpenCL, the API for writing heterogeneous applications. Provided are slides for around twelve lectures, plus some appendices, complete with Examples and Solutions in C, C++ and Python. The lecture series finishes with information on porting CUDA applications to OpenCL.\r\n\r\nThis set of freely available OpenCL [exercises and solutions](https://github.com/HandsOnOpenCL/Exercises-Solutions), together with [slides](https://github.com/HandsOnOpenCL/Lecture-Slides/releases) have been created by Simon McIntosh-Smith and Tom Deakin from the University of Bristol in the UK, with financial support from the Khronos Initiative for Training and Education ([KITE](http://kite.khronos.org/en/opencl)) to promote the use of open standards.\r\n\r\n[Simon McIntosh-Smith](http://www.cs.bris.ac.uk/home/simonm/) is one of the foremost OpenCL trainers in the world, having taught the subject since 2009. He has run many OpenCL training courses at conferences such as SuperComputing and HiPEAC, and has provided OpenCL training for the UK's national supercomputing service and for the Barcelona Supercomputing Center. With OpenCL training experience ranging from half day on-site introductions within companies, to two-day intensive hands-on workshops for undergraduates, Simon can provide customized OpenCL training to meet your needs. Get in touch if you'd like to know more:\r\n\r\nFor more about the authors, please visit [Simon's home page](http://www.cs.bris.ac.uk/home/simonm/) or [Tom's home page](http://www.tomdeakin.com).\r\n\r\nThese lectures, and their examples, and released under the \"attribution CC BY\" creative commons license. In other words, you can use these in any way you see fit, including commercially, but please retain an attribution for the original authors, Simon McIntosh-Smith and Tom Deakin.\r\n\r\n### Get the slides and code\r\nThe slides are available under [Releases](https://github.com/HandsOnOpenCL/Lecture-Slides/releases). The code is available in the [Exercises and Solutions repository](https://github.com/HandsOnOpenCL/Exercises-Solutions).\r\n\r\n### Course Structure\r\n1. **Introduction to Heterogeneous Parallel Computing**\r\n\r\n    Setting up your OpenCL environment (AMD, Intel, NVIDIA)\r\n\r\n2. **An overview of OpenCL**\r\n\r\n3. **Important OpenCL concepts**\r\n\r\n    Platforms, contexts, programs, queues, buffers and kernels\r\n\r\n    NDRanges, Work‚ÄêGroups, Work-Items\t\r\n  \r\n4. **Overview of OpenCL APIs**\r\n\r\n    C, C++ and Python\t\r\n  \r\n5. **Introducing OpenCL kernel programming**\r\n  \r\n6. **Understanding the OpenCL memory hierarchy**\r\n  \r\n7. **Synchronization in OpenCL**\r\n\r\n    Events and barriers\r\n  \r\n8. **Heterogeneous computing with OpenCL**\r\n\r\n    Using CPUs and GPUs simultaneously, multiple platforms and devices\r\n\r\n9. **Enabling portable performance via OpenCL**\r\n\r\n    Autotuning using Flamingo\r\n  \r\n10. **Optimizing OpenCL performance**\r\n\r\n    Profiling using Extrae and Paraver\r\n    Information on NVVP and CodeXL\r\n  \r\n11. **Debugging OpenCL**\r\n\r\n    Using GDB\r\n  \r\n12. **Porting CUDA to OpenCL**\r\n \r\n\r\n### Examples\r\nDownload the examples by checking out the git repository with the command:\r\n\r\n`git clone git://github.com/HandsOnOpenCL/Exercises-Solutions.git`\r\n\r\n1. **Platform Information**\r\n\r\n    Run a simple OpenCL program to give you some key facts about the devices available in your system.\r\n\r\n\r\n2. **VADD - The OpenCL \"Hello World\"**\r\n\r\n    Start by looking at the C API for this program which introduces the OpenCL computational model.\r\n\r\n\r\n3. **VADD - Now in C++ and Python**\r\n\r\n\r\n4. **Chaining vector add kernels**\r\n\r\n    Extend VADD to compute C=A+B; D=C+E; F=D+G by running the kernel multiple times.\r\n\r\n\r\n5. **Extend VADD for D = A + B + C**\r\n\r\n    Extend the VADD kernel to compute a different sum.\r\n\r\n\r\n6. **Matrix Multiplication**\r\n\r\n    Write your first OpenCL kernel from scratch.\r\n\r\n\r\n7. **Using private memory**\r\n\r\n    Use private memory to minimize memory costs.\r\n\r\n8. **Using local memory**\r\n\r\n    Use local and private memory to minimize memory costs.\r\n\r\n9. **The Pi program**\r\n\r\n    Estimate Pi by integration.\r\n\r\n\r\n10. **Heterogeneous Computing**\r\n\r\n    Run your kernels on many devices.\r\n\r\n11. **Optimize matrix multiplication**\r\n\r\n    Look at portable performance (combining 9. and 10.)\r\n\r\n12. **Profiling OpenCL programs**\r\n\r\n    Experiment making things run faster.\r\n\r\n\r\n13. **Porting CUDA to OpenCL**\r\n\r\n    Convert a simple CUDA application to OpenCL (program TBA).\r\n\r\n### Authors and Contributors\r\nSimon McIntosh-Smith, University of Bristol\r\n\r\nTom Deakin (@tomdeakin)\r\n\r\n### Support or Contact\r\nFound a bug or with to suggest an update to the material?\r\nPlease submit a new Issue in the relevant repository ([Exercises](https://github.com/HandsOnOpenCL/Exercises-Solutions/issues) or [Slides](https://github.com/HandsOnOpenCL/Lecture-Slides/issues))\r\n\r\nFixed a bug yourself? Please submit a [pull request](https://help.github.com/articles/using-pull-requests). Thanks.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}